// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using online_shop_backend.Models.Identity;

#nullable disable

namespace online_shop_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.1.23419.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "617db7b5-fe30-4c30-94b0-00a7802b4b08",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "f07efd7d-6bce-4e52-9d8f-d7be738e45c5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8769c0d4-08f1-4b10-aeb1-5f763e592131",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "mdi-dog",
                            IsActual = true,
                            Title = "Собаки"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "mdi-cat",
                            IsActual = true,
                            Title = "Кошки"
                        },
                        new
                        {
                            Id = 3,
                            Icon = "mdi-rodent",
                            IsActual = true,
                            Title = "Грызуны"
                        },
                        new
                        {
                            Id = 4,
                            Icon = "mdi-fish",
                            IsActual = true,
                            Title = "Рыбы"
                        },
                        new
                        {
                            Id = 5,
                            Icon = "mdi-bird",
                            IsActual = true,
                            Title = "Птицы"
                        },
                        new
                        {
                            Id = 6,
                            Icon = "mdi-snake",
                            IsActual = true,
                            Title = "Риптилии"
                        },
                        new
                        {
                            Id = 7,
                            Icon = "mdi-horse",
                            IsActual = true,
                            Title = "Другие питомцы"
                        },
                        new
                        {
                            Id = 8,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Уход и аксессуары"
                        });
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("numeric");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("OrderId");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.InvoiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("ItemQuantity")
                        .HasColumnType("integer");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("invoice_details", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("ShippingMethodId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ShippingMethodPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ShippingMethodId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("text");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("payment_methods", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("payment_types", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("producers", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.ProducerDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("ProducerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.ToTable("producer_details", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProducerId")
                        .HasColumnType("integer");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.ProductPicture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_pictures", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("ProductId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.ShippingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("shipping_methods", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("subcategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Корм для собак"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Игрушки для собак"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Ошейники и поводкик"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Туалеты"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Миски и поилки"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Корм для кошек"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Игрушки для кошек"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Ошейники и поводки"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Когтеточки"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Туалеты"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Миски и поилки"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Корм для грызунов"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Вольеры и клетки"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Игрушки для грызунов"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Миски и поилки"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Корм для рыбок"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Прочая переферия для рыбок"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 5,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Вольеры и клетки"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 5,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Корм для птиц"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 5,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Гнезда и гнездовые принадлежности"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 6,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Террариумы"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 6,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Корм для рептилий"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 6,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Освещение и обогрев для террариумов"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 7,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Мелкие животные"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 7,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Корм и аксессуары для экзотических животных"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 8,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Гигиенические средства"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 8,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Посуда и кормушки"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 8,
                            Icon = "mdi-paw",
                            IsActual = true,
                            Title = "Лежанки и домики"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 8,
                            Icon = "mdi-bottle-tonic-plus",
                            IsActual = true,
                            Title = "Одежда и аксессуары"
                        });
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.UserDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Address3")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("user_details", (string)null);
                });

            modelBuilder.Entity("online_shop_backend.Models.Identity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Discount", b =>
                {
                    b.HasOne("online_shop_backend.Models.Entities.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Invoice", b =>
                {
                    b.HasOne("online_shop_backend.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("Invoices")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("online_shop_backend.Models.Entities.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("online_shop_backend.Models.Entities.Invoice", "Invoice")
                        .WithMany("Details")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("online_shop_backend.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Order", b =>
                {
                    b.HasOne("online_shop_backend.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("online_shop_backend.Models.Entities.ShippingMethod", "ShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("ShippingMethod");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.OrderDetail", b =>
                {
                    b.HasOne("online_shop_backend.Models.Entities.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("online_shop_backend.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.PaymentMethod", b =>
                {
                    b.HasOne("online_shop_backend.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("online_shop_backend.Models.Entities.PaymentType", "PaymentType")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.ProducerDetail", b =>
                {
                    b.HasOne("online_shop_backend.Models.Entities.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Product", b =>
                {
                    b.HasOne("online_shop_backend.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("online_shop_backend.Models.Entities.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("online_shop_backend.Models.Entities.Subcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Producer");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.ProductPicture", b =>
                {
                    b.HasOne("online_shop_backend.Models.Entities.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("online_shop_backend.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Review", b =>
                {
                    b.HasOne("online_shop_backend.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("Reviews")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("online_shop_backend.Models.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Subcategory", b =>
                {
                    b.HasOne("online_shop_backend.Models.Entities.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.UserDetail", b =>
                {
                    b.HasOne("online_shop_backend.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("Details")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Invoice", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Order", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.PaymentType", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("online_shop_backend.Models.Entities.Product", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("ProductPictures");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("online_shop_backend.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Invoices");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
